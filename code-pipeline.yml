AWSTemplateFormatVersion: 2010-09-09
Description: create code pipeline

Parameters:
  ProjectName:
    Type: String
    Default: env-echo

  BuildTargetBranch:
    Description: build target (trigger) branch name
    Type: String
    Default: master

  BuildSpecPath:
    Description: buildspec file path in repository
    Type: String
    Default: env-echo/buildspec.yml

  GitHubOAuthToken:
    Description: github oauth token
    Type: String
    NoEcho: true

  GitHubRepoOwner:
    Description: github owner name
    Type: String
    Default: akihokurino

  GitHubRepoName:
    Description: github repository name
    Type: String
    Default: aws-ecs-sample

  ScheduledTaskDeployFunctionName:
    Description: scheduled task deploy function name
    Type: String
    Default: ecs-scheduled-task-deployer-Function-LO3H2M6CRY2P

Resources:
  # ------------------------------------------------------------#
  #  S3 Bucket
  # ------------------------------------------------------------#
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ProjectName}-artifact
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  # ------------------------------------------------------------#
  #  code pipeline
  # ------------------------------------------------------------#
  PipelineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-pipeline-execution-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
      Policies:
        - PolicyName: pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - "iam:PassRole"
                Resource: "*"
                Effect: Allow
                Condition:
                  StringEqualsIfExists:
                    iam:PassedToService:
                      - "cloudformation.amazonaws.com"
                      - "ec2.amazonaws.com"
                      - "ecs-tasks.amazonaws.com"
              - Action:
                  - "ec2:*"
                  - "elasticloadbalancing:*"
                  - "autoscaling:*"
                  - "cloudwatch:*"
                  - "s3:*"
                  - "sns:*"
                  - "cloudformation:*"
                  - "rds:*"
                  - "sqs:*"
                  - "ecs:*"
                  - "lambda:*"
                  - "codebuild:*"
                  - "codedeploy:*"
                  - "ecr:*"
                Resource: "*"
                Effect: Allow

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Sub ${ProjectName}-artifact
      Name: !Sub ${ProjectName}-${BuildTargetBranch}
      RestartExecutionOnUpdate: false
      RoleArn: !GetAtt PipelineExecutionRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Srouce
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              RunOrder: 1
              Configuration:
                Branch: !Ref BuildTargetBranch
                OAuthToken: !Ref GitHubOAuthToken
                Owner: !Ref GitHubRepoOwner
                Repo: !Ref GitHubRepoName
                PollForSourceChanges: "true"
              OutputArtifacts:
                - Name: SourceArtifact
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              RunOrder: 1
              Configuration:
                ProjectName: !Ref BuildProject
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
        - Name: Deploy
          Actions:
            - Name: Deploy-API
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: 1
              RunOrder: 1
              Configuration:
                ClusterName: !Sub ${ProjectName}
                ServiceName: !Sub ${ProjectName}-api
                # buildspec.ymlで指定しているartifactsのfile名と同じにする
                FileName: imagedefinitions.json
              InputArtifacts:
                - Name: BuildArtifact
            - Name: Deploy-Batch-Hello
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              RunOrder: 1
              Configuration:
                FunctionName: !Ref ScheduledTaskDeployFunctionName
                UserParameters: !Sub ${ProjectName}-batch-hello
              InputArtifacts:
                - Name: BuildArtifact
              OutputArtifacts: []

  # ------------------------------------------------------------#
  #  code build
  # ------------------------------------------------------------#
  BuildExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-build-execution-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
      Policies:
        - PolicyName: build-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ProjectName}
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ProjectName}:*
                Effect: Allow
              - Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketAcl"
                  - "s3:GetBucketLocation"
                Resource:
                  - !Sub arn:aws:s3:::${ProjectName}-artifact*
                Effect: Allow

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Cache:
        Modes:
          - LOCAL_SOURCE_CACHE
          - LOCAL_DOCKER_LAYER_CACHE
        Type: LOCAL
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/standard:2.0
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: PROJECT_NAME
            Value: !Sub ${ProjectName}
        PrivilegedMode: true
      Name: !Sub ${ProjectName}
      ServiceRole: !GetAtt BuildExecutionRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Ref BuildSpecPath

Outputs: {}
